{"version":3,"sources":["../src/index.js"],"names":["app","server","http","createServer","set","path","join","__dirname","use","require","secret","resave","saveUninitialized","exposedHeaders","config","corsHeaders","bodyParser","json","limit","bodyLimit","authconfig","express","static","passport","initialize","session","get","req","res","isAuthenticated","render","name","user","displayName","redirect","listen","process","env","PORT","port","console","log","address"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,MAAM,wBAAZ;AACAA,IAAIC,MAAJ,GAAaC,eAAKC,YAAL,CAAkBH,GAAlB,CAAb;;AAEA;AACAA,IAAII,GAAJ,CAAQ,aAAR,EAAuB,KAAvB;AACAJ,IAAII,GAAJ,CAAQ,OAAR,EAAiBC,eAAKC,IAAL,CAAUC,SAAV,EAAqB,OAArB,CAAjB;AACA;AACAP,IAAIQ,GAAJ,CAAQ,sBAAO,KAAP,CAAR;AACAR,IAAIQ,GAAJ,CAAQ,6BAAR;AACAR,IAAIQ,GAAJ,CAAQC,QAAQ,iBAAR,EAA2B;AACjCC,UAAQ,cADyB;AAEjCC,UAAQ,IAFyB;AAGjCC,qBAAmB;AAHc,CAA3B,CAAR;;AAMA;AACAZ,IAAIQ,GAAJ,CAAQ,oBAAK;AACXK,kBAAgBC,iBAAOC;AADZ,CAAL,CAAR;AAGAf,IAAIQ,GAAJ,CAAQQ,qBAAWC,IAAX,CAAgB;AACtBC,SAAOJ,iBAAOK;AADQ,CAAhB,CAAR;;AAIA;AACAnB,IAAIQ,GAAJ,CAAQY,kBAAR;AACApB,IAAIQ,GAAJ,CAAQa,kBAAQC,MAAR,CAAkBf,SAAlB,aAAR;AACAP,IAAIQ,GAAJ,CAAQe,mBAASC,UAAT,EAAR;AACAxB,IAAIQ,GAAJ,CAAQe,mBAASE,OAAT,EAAR;AACA;AACA,kBAAa,YAAM;AACjB;AACAzB,MAAI0B,GAAJ,CAAQ,GAAR,EAAa,UAACC,GAAD,EAAMC,GAAN,EAAc;AACzB,QAAID,IAAIE,eAAJ,EAAJ,EAA2B;AACzBD,UAAIE,MAAJ,CAAW,MAAX,EAAmB,EAAEC,MAAMJ,IAAIK,IAAJ,CAASC,WAAjB,EAAnB;AACD,KAFD,MAEO;AACLL,UAAIE,MAAJ,CAAW,OAAX;AACD;AACF,GAND;AAOA9B,MAAIQ,GAAJ,CAAQ,MAAR,EAAgB,oBAAhB;AACAR,MAAI0B,GAAJ,CAAQ,QAAR,EAAkB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC9BA,QAAIM,QAAJ,CAAa,4BAAb;AACD,GAFD;;AAIAlC,MAAIC,MAAJ,CAAWkC,MAAX,CAAkBC,QAAQC,GAAR,CAAYC,IAAZ,IAAoBxB,iBAAOyB,IAA7C,EAAmD,YAAM;AACvDC,YAAQC,GAAR,sBAA+BzC,IAAIC,MAAJ,CAAWyC,OAAX,GAAqBH,IAApD;AACD,GAFD;AAGD,CAjBD;;kBAmBevC,G","file":"index.js","sourcesContent":["import http from 'http';\nimport express from 'express';\nimport cors from 'cors';\nimport cookieParser from 'cookie-parser';\nimport morgan from 'morgan';\nimport bodyParser from 'body-parser';\nimport passport from 'passport';\nimport path from 'path';\nimport initializeDb from './db';\nimport authconfig from './middleware/passport';\nimport api from './api';\nimport config from './config.json';\n\nconst app = express();\napp.server = http.createServer(app);\n\n// views\napp.set('view engine', 'ejs');\napp.set('views', path.join(__dirname, 'views'));\n// logger\napp.use(morgan('dev'));\napp.use(cookieParser());\napp.use(require('express-session')({\n  secret: 'keyboard cat',\n  resave: true,\n  saveUninitialized: true,\n}));\n\n// 3rd party middleware\napp.use(cors({\n  exposedHeaders: config.corsHeaders,\n}));\napp.use(bodyParser.json({\n  limit: config.bodyLimit,\n}));\n\n// passport config\napp.use(authconfig);\napp.use(express.static(`${__dirname}/public`));\napp.use(passport.initialize());\napp.use(passport.session());\n// connect to db\ninitializeDb(() => {\n  // api router\n  app.get('/', (req, res) => {\n    if (req.isAuthenticated()) {\n      res.render('home', { name: req.user.displayName });\n    } else {\n      res.render('login');\n    }\n  });\n  app.use('/api', api());\n  app.get('/error', (req, res) => {\n    res.redirect('http:/localhost:3000/error');\n  });\n\n  app.server.listen(process.env.PORT || config.port, () => {\n    console.log(`Started on port ${app.server.address().port}`);\n  });\n});\n\nexport default app;\n"]}